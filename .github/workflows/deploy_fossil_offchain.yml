name: Build and Run Yokai Agent Docker Container

on:
  push:
    branches:
      - feat/ci_cd_fossil

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: fossil-offchain-processor-images-repository
  ECS_SERVICE: fossil-offchain-processor-app-ecs
  ECS_CLUSTER: fossil-offchain-processor-ecs-cluster
  CONTAINER_NAME: fossil-offchian-app 
  TASK_NAME: fossil-offchian-app 

permissions:
  id-token: write
  contents: write

jobs:
  deploy-agent:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::654654236251:role/terraform-20241003185909187100000001
          role-session-name: Github
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Check if Docker is installed
        run: |
          if ! command -v docker &> /dev/null
          then
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo apt-get install -y docker-compose
          fi

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker buildx build --platform=linux/amd64 -f ./Dockerfile -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_NAME }} --query taskDefinition > task-definition.json

      # - name: Read secrets from AWS Secrets Manager into environment variables
      #   id: read-secrets
      #   uses: aws-actions/aws-secretsmanager-get-secrets@v2
      #   with:
      #     secret-ids: |
      #       OPENAI_API_KEY
      #       API_KEY
      #       PAGE_KEY
      #       NOTION_KEY

      #   env:
      #     OPENAI_API_KEY: ${{ steps.read-secrets.outputs.OPENAI_API_KEY }}
      #     API_KEY: ${{ steps.read-secrets.outputs.API_KEY }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.IMAGE_URI }}
          # environment-variables: |
          #   OPENAI_API_KEY=${{ env.OPENAI_API_KEY }}
          #   API_KEY=${{ env.API_KEY }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true